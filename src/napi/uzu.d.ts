/* auto-generated by NAPI-RS */
/* eslint-disable */
/** Thin FFI wrapper around `ModelStorage`. */
export declare class Engine {
  getCloudModels(): Promise<Array<CloudModel>>
  fetchCloudModels(): Promise<Array<CloudModel>>
  /** Returns a `DownloadHandle` for the given model identifier. */
  downloadHandle(repoId: string): ModelDownloadHandle
  getLocalModels(): Array<LocalModel>
  getState(repoId: string): ModelDownloadState
  activate(apiKey: string): Promise<LicenseStatus>
  downloadModel(repoId: string): Promise<void>
  pauseModel(repoId: string): Promise<void>
  deleteModel(repoId: string): Promise<void>
  constructor()
  createSession(repoId: string, modelType: ModelType, config: Config): Session
}

export declare class ModelDownloadHandle {
  identifier(): string
  download(): Promise<void>
  pause(): Promise<void>
  delete(): Promise<void>
  state(): Promise<ModelDownloadState>
  progress(): AsyncIterable<ProgressUpdate>
}

export declare class ProgressStream {

}

export declare class ProgressUpdate {
  /** Bytes downloaded so far. */
  completedBytes: number
  /** Total bytes expected for the download; `None` while unknown. */
  totalBytes?: number
  /** Normalised progress between 0.0 and 1.0. */
  progress: number
}

export declare class Session {
  run(input: Input, config: RunConfig, progress?: (arg: Output) => boolean | undefined | null): Output
}

export interface ClassificationFeature {
  name: string
  values: Array<string>
}

export interface CloudModel {
  readonly repoId: string
  readonly name: string
  readonly vendor: string
  readonly outputParserRegex?: string
}

export interface Config {
  preset: Preset
  prefillStepSize: PrefillStepSize
  contextLength: ContextLength
  samplingSeed: SamplingSeed
}

export type ContextLength =
  | { type: 'Default' }
  | { type: 'Maximal' }
  | { type: 'Custom', length: number }

export declare const enum FinishReason {
  Stop = 0,
  Length = 1,
  Cancelled = 2,
  ContextLimitReached = 3
}

export type Input =
  | { type: 'Text', text: string }
  | { type: 'Messages', messages: Array<Message> }

export type LicenseStatus =
  | { type: 'NotActivated' }
  | { type: 'PaymentRequired' }
  | { type: 'GracePeriodActive' }
  | { type: 'Activated' }
  | { type: 'NetworkError' }
  | { type: 'InvalidApiKey' }
  | { type: 'SignatureMismatch' }
  | { type: 'Timeout' }
  | { type: 'HttpError', code: number }

export interface LocalModel {
  readonly identifier: string
  readonly repoId: string
  readonly family: string
  readonly vendor: string
  readonly name: string
  readonly size: string
  readonly quantization?: string
  readonly outputParserRegex?: string
  readonly state: ModelDownloadState
}

export interface Message {
  role: Role
  content: string
  reasoningContent?: string
}

export declare const enum ModelDownloadPhase {
  NotDownloaded = 0,
  Downloading = 1,
  Paused = 2,
  Downloaded = 3,
  Error = 4
}

export interface ModelDownloadState {
  /** Total size of all model files in kilobytes. */
  readonly totalKbytes: number
  /** Bytes already downloaded (meaningful in Downloading / Paused). */
  readonly downloadedKbytes: number
  /** Current phase of the download. */
  readonly phase: ModelDownloadPhase
  /** Stringified error when `phase == ModelDownloadPhase::Error`. */
  readonly error?: string
}

export type ModelStorageError =
  | { type: 'Io', message: string }
  | { type: 'Network', message: string }
  | { type: 'DownloadFailed', message: string }
  | { type: 'Download', message: string }
  | { type: 'InvalidPath', message: string }
  | { type: 'ModelNotFound', identifier: string }
  | { type: 'FileVerificationFailed', message: string }
  | { type: 'Paused' }

export declare const enum ModelType {
  Local = 0,
  Cloud = 1
}

export interface Output {
  text: Text
  stats: Stats
  finishReason?: FinishReason
}

export interface ParsedText {
  chainOfThought?: string
  response?: string
}

export type PrefillStepSize =
  | { type: 'Default' }
  | { type: 'Maximal' }
  | { type: 'Custom', length: number }

export type Preset =
  | { type: 'General' }
  | { type: 'Classification', feature: ClassificationFeature }
  | { type: 'Summarization' }

export declare const enum Role {
  System = 0,
  User = 1,
  Assistant = 2
}

export interface RunConfig {
  tokensLimit: number
  enableThinking: boolean
  samplingPolicy: SamplingPolicy
}

export interface RunStats {
  count: bigint
  averageDuration: number
}

export type SamplingMethod =
  | { type: 'Greedy' }
  | { type: 'Temperature', temperature: number }
  | { type: 'TopP', topP: number }

export type SamplingPolicy =
  | { type: 'Default' }
  | { type: 'Custom', value: SamplingMethod }

export type SamplingSeed =
  | { type: 'Default' }
  | { type: 'Custom', seed: number }

export interface Stats {
  prefillStats: StepStats
  generateStats?: StepStats
  totalStats: TotalStats
}

export interface StepStats {
  duration: number
  suffixLength: bigint
  tokensCount: bigint
  tokensPerSecond: number
  processedTokensPerSecond: number
  modelRun: RunStats
  run?: RunStats
}

export type StorageError =
  | { type: 'ModelNotDownloaded' }
  | { type: 'UnknownModel', repoId: string }
  | { type: 'Storage', message: string }
  | { type: 'MutexPoisoned', message: string }
  | { type: 'LicenseNotActivated' }

export interface Text {
  original: string
  parsed: ParsedText
}

export interface TotalStats {
  duration: number
  tokensCountInput: bigint
  tokensCountOutput: bigint
}

export declare function version(): string
