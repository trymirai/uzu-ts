/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class DownloadHandle {
  start(): void
  pause(): void
  resume(): void
  stop(): void
  delete(): void
  state(): ModelDownloadState
  identifier(): string
  progress(): AsyncIterable<ProgressUpdate>
}

/** Thin FFI wrapper around `ModelStorage`. */
export declare class Engine {
  getCloudModels(): Promise<Array<CloudModel>>
  fetchCloudModels(): Promise<Array<CloudModel>>
  /** Returns a `DownloadHandle` for the given model identifier. */
  downloadHandle(identifier: string): DownloadHandle
  getLocalModels(): Array<LocalModel>
  getState(identifier: string): ModelDownloadState
  download(identifier: string): void
  pause(identifier: string): void
  resume(identifier: string): void
  stop(identifier: string): void
  delete(identifier: string): void
  updateRegistry(): Promise<Array<LocalModel>>
  activate(apiKey: string): Promise<LicenseStatus>
  constructor()
  createSession(modelId: ModelID): Session
}

export declare class ProgressStream {

}

export declare class ProgressUpdate {
  /** Bytes downloaded so far. */
  completedBytes: number
  /** Total bytes expected for the download; `None` while unknown. */
  totalBytes?: number
  /** Normalised progress between 0.0 and 1.0. */
  progress: number
}

export declare class Session {
  load(config: SessionConfig): void
  run(input: SessionInput, runConfig: SessionRunConfig, progressCallback?: (arg: SessionOutput) => boolean | undefined | null): SessionOutput
}

export interface CloudModel {
  readonly repoId: string
  readonly name: string
  readonly vendor: string
}

export type ContextLength =
  | { type: 'Default' }
  | { type: 'Custom', length: number }

export interface DecoderTestResult {
  placementLog: string
  iterations: number
  timePerToken: number
  tokensPerSecond: number
  success: boolean
  error?: string
}

export type DownloaderError =
  | { type: 'Http', message: string }
  | { type: 'Io', message: string }
  | { type: 'AlreadyExists', path: string }
  | { type: 'Generic', message: string }

export type LicenseStatus =
  | { type: 'NotActivated' }
  | { type: 'PaymentRequired' }
  | { type: 'GracePeriodActive' }
  | { type: 'Activated' }
  | { type: 'NetworkError' }
  | { type: 'InvalidApiKey' }
  | { type: 'SignatureMismatch' }
  | { type: 'Timeout' }
  | { type: 'HttpError', code: number }

export interface LocalModel {
  /** Unique identifier of the model in the form `<vendor>-<name>-<precision>`. */
  readonly identifier: string
  /** Vendor/author of the model (e.g. "Llama"). */
  readonly vendor: string
  /** Human-readable model name without vendor/precision (e.g. "3B-Instruct"). */
  readonly name: string
  /** Numerical precision of the weights (e.g. "float16"). */
  readonly precision: string
  /** Quantization type if the model is quantized (e.g. "uint4"). */
  readonly quantization?: string
  /** Current download/installation state. */
  readonly state: ModelDownloadState
}

export interface ModelDownloadState {
  /** Total size of all model files in kilobytes. */
  readonly totalKbytes: number
  /** Bytes already downloaded (meaningful in Downloading / Paused). */
  readonly downloadedKbytes: number
  /** Current phase of the download. */
  readonly phase: Phase
  /** Stringified error when `phase == Phase::Error`. */
  readonly error?: string
}

export type ModelID =
  | { type: 'Local', id: string }
  | { type: 'Cloud', id: string }

export declare const enum Phase {
  NotDownloaded = 0,
  Downloading = 1,
  Paused = 2,
  Downloaded = 3,
  Error = 4
}

export type SamplingConfig =
  | { type: 'Argmax' }
  | { type: 'TopP', topP: number }
  | { type: 'Categorical', temperature: number }

export type SamplingSeed =
  | { type: 'Default' }
  | { type: 'Custom', seed: number }

export interface SessionClassificationFeature {
  name: string
  values: Array<string>
}

export interface SessionConfig {
  preset: SessionPreset
  samplingSeed: SamplingSeed
  contextLength: ContextLength
}

export type SessionInput =
  | { type: 'Text', text: string }
  | { type: 'Messages', messages: Array<SessionMessage> }

export interface SessionMessage {
  role: SessionMessageRole
  content: string
}

export declare const enum SessionMessageRole {
  System = 0,
  User = 1,
  Assistant = 2
}

export interface SessionOutput {
  text: string
  stats: SessionOutputStats
  finishReason?: SessionOutputFinishReason
}

export declare const enum SessionOutputFinishReason {
  Stop = 0,
  Length = 1,
  Cancelled = 2
}

export interface SessionOutputRunStats {
  count: bigint
  averageDuration: number
}

export interface SessionOutputStats {
  prefillStats: SessionOutputStepStats
  generateStats?: SessionOutputStepStats
  totalStats: SessionOutputTotalStats
}

export interface SessionOutputStepStats {
  duration: number
  suffixLength: bigint
  tokensCount: bigint
  tokensPerSecond: number
  modelRun: SessionOutputRunStats
  run?: SessionOutputRunStats
}

export interface SessionOutputTotalStats {
  duration: number
  tokensCountInput: bigint
  tokensCountOutput: bigint
}

export type SessionPreset =
  | { type: 'General' }
  | { type: 'Classification', feature: SessionClassificationFeature }
  | { type: 'Summarization' }

export interface SessionRunConfig {
  tokensLimit: number
  samplingConfig?: SamplingConfig
}

export type StorageError =
  | { type: 'ModelNotDownloaded' }
  | { type: 'UnknownModel', identifier: string }
  | { type: 'Storage', message: string }
  | { type: 'MutexPoisoned', message: string }
  | { type: 'LicenseNotActivated' }

export declare function version(): string
